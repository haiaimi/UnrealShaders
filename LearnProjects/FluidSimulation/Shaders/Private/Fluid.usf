//#include "Private/Common.ush"
#include "/Engine/Public/Platform.ush"

//#ifndef THREAD_GROUP_SIZE
//	#define THREAD_GROUP_SIZE 4
//#endif

Texture2D<float2> VelocityField;
Texture2D<float2> SrcTexture;
RWTexture2D<float2> RWDstTexture;
float ValueScale;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void Boundary(uint3 GroupId : SV_GroupID,
			    uint3 DispatchThreadId : SV_DispatchThreadID,
			    uint3 GroupThreadId : SV_GroupThreadID)
{
	uint2 SrcSize;
	SrcTexture.GetDimensions(SrcSize.x, SrcSize.y);

#if VERTICAL_BOUNDARY
	RWDstTexture[uint2(0, DispatchThreadId.x + 1)] = ValueScale * SrcTexture[uint2(1, DispatchThreadId.x + 1)];
	RWDstTexture[uint2(SrcSize.x - 1, DispatchThreadId.x + 1)] = ValueScale * SrcTexture[uint2(SrcSize.x - 2, DispatchThreadId.x + 1)];
#else
	RWDstTexture[uint2(DispatchThreadId.x + 1, 0)] = ValueScale * SrcTexture[uint2(DispatchThreadId.x + 1, 1)];
	RWDstTexture[uint2(DispatchThreadId.x + 1, SrcSize.y - 1)] = ValueScale * SrcTexture[uint2(DispatchThreadId.x + 1, SrcSize.y - 2)];
#endif
}


//[numthreads(THREAD_GROUP_SIZE, 1, 1)]
//void CopyBoundary(uint3 GroupId : SV_GroupID,
//			    uint3 DispatchThreadId : SV_DispatchThreadID,
//			    uint3 GroupThreadId : SV_GroupThreadID)
//{
//	uint2 SrcSize;
//	SrcTexture.GetDimensions(SrcSize.x, SrcSize.y);
	
//#if VERTICAL_BOUNDARY
//	RWDstTexture[uint2(0, DispatchThreadId.x + 1)] = SrcTexture[uint2(0, DispatchThreadId.x + 1)];
//	RWDstTexture[uint2(SrcSize.x - 1, DispatchThreadId.x + 1)] = SrcTexture[uint2(SrcSize.x - 1, DispatchThreadId.x + 1)];
//#else
//	RWDstTexture[uint2(DispatchThreadId.x + 1, 0)] = SrcTexture[uint2(DispatchThreadId.x + 1, 0)];
//	RWDstTexture[uint2(DispatchThreadId.x + 1, SrcSize.y - 1)] = SrcTexture[uint2(DispatchThreadId.x + 1, SrcSize.y - 1)];
//#endif
//}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CopyBoundary(uint3 GroupId : SV_GroupID,
			    uint3 DispatchThreadId : SV_DispatchThreadID,
			    uint3 GroupThreadId : SV_GroupThreadID)
{
	uint2 SrcSize;
	SrcTexture.GetDimensions(SrcSize.x, SrcSize.y);
	uint2 BoundaryStart[4] /* = { uint2(1, 0), uint2(DispatchThreadId.x - 1, 0) }*/;

	SrcSize = SrcSize - uint2(2, 2);
	uint4 X = 0, Y = 0, Z = 0, W = 0;
	bool bTop = DispatchThreadId.x >= 0 && DispatchThreadId.x < SrcSize.x;
	BoundaryStart[0] = uint2(1 + DispatchThreadId.x, 0);
	bool bRight = DispatchThreadId.x >= SrcSize.x && DispatchThreadId.x < SrcSize.x + SrcSize.y;
	BoundaryStart[1] = uint2(SrcSize.x + 1, DispatchThreadId.x - SrcSize.x);
	bool bBottom = DispatchThreadId.x >= SrcSize.x + SrcSize.y && DispatchThreadId.x < SrcSize.x * 2 + SrcSize.y;
	BoundaryStart[2] = uint2(2 * SrcSize.x - DispatchThreadId.x + SrcSize.y, SrcSize.y + 1);
	bool bLeft = DispatchThreadId.x >= SrcSize.x * 2 + SrcSize.y && DispatchThreadId.x < SrcSize.x * 2 + SrcSize.y * 2;
	BoundaryStart[3] = uint2(0, 2 * SrcSize.y - DispatchThreadId.x + SrcSize.x * 2);
	
	uint BoundaryMask = 0;
	BoundaryMask |= (uint) bTop << 0;
	BoundaryMask |= (uint) bRight << 1;
	BoundaryMask |= (uint) bBottom << 2;
	BoundaryMask |= (uint) bLeft << 3;

	BoundaryMask = log2(BoundaryMask);
	
	RWDstTexture[BoundaryStart[BoundaryMask]] = SrcTexture[BoundaryStart[BoundaryMask]];
}

float TimeStep;
float Dissipation;
float rdx;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void Advect(uint3 GroupId : SV_GroupID,
			uint3 DispatchThreadId : SV_DispatchThreadID,
			uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 FieldSize;
	VelocityField.GetDimensions(FieldSize.x, FieldSize.y);
	float2 CurVelocity = VelocityField[DispatchThreadId.xy + 1].xy;
	float2 PreCoord = float2(DispatchThreadId.xy + 1) - 1.f * TimeStep * CurVelocity;
	//PreCoord = clamp(PreCoord, 0.f, FieldSize);

	uint2 floorCoord = (uint2)clamp(floor(PreCoord), 0.f, FieldSize);
	uint2 roundCoord = floorCoord + uint2(1, 1);
	
	float FracX = frac(PreCoord.x);
	float FracY = frac(PreCoord.y);
	
	RWDstTexture[DispatchThreadId.xy + 1] = Dissipation * float2(lerp(lerp(SrcTexture[floorCoord], SrcTexture[uint2(roundCoord.x, floorCoord.y)], FracX),
											lerp(SrcTexture[uint2(floorCoord.x, roundCoord.y)], SrcTexture[roundCoord], FracX),
											FracY));
}

void LoadTextureNeighbors(Texture2D<float4> InTexure, uint2 SampleCoord, out float4 Left, out float4 Top, out float4 Right, out float4 Bottom)
{
	Left = InTexure[SampleCoord - uint2(1, 0)];
	Top = InTexure[SampleCoord - uint2(0, 1)];
	Right = InTexure[SampleCoord + uint2(1, 0)];
	Bottom = InTexure[SampleCoord + uint2(0, 1)];
}

void LoadTextureNeighbors(Texture2D<float2> InTexure, uint2 SampleCoord, out float2 Left, out float2 Top, out float2 Right, out float2 Bottom)
{
	Left = InTexure[SampleCoord - uint2(1, 0)];
	Top = InTexure[SampleCoord - uint2(0, 1)];
	Right = InTexure[SampleCoord + uint2(1, 0)];
	Bottom = InTexure[SampleCoord + uint2(0, 1)];
}

float Alpha;
float rBeta;
// Jacobi -> Ax=b, 
Texture2D<float2> Jacobi_x;
Texture2D<float2> Jacobi_b;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void Jacobi(uint3 GroupId : SV_GroupID,
			uint3 DispatchThreadId : SV_DispatchThreadID,
			uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 xLeft, xTop, xRight, xBottom;
	LoadTextureNeighbors(Jacobi_x, DispatchThreadId.xy + 1, xLeft, xTop, xRight, xBottom);
	float2 b = Jacobi_b[DispatchThreadId.xy + 1];
	
	RWDstTexture[DispatchThreadId.xy + 1] = (xLeft + xRight + xTop + xBottom + Alpha * b) * rBeta;
}

float4 ForceParam;
int2 ForcePos;
float Radius;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void AddImpluse(uint3 GroupId : SV_GroupID,
				uint3 DispatchThreadId : SV_DispatchThreadID,
				uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 DeltaPos = float2(ForcePos - (int2)DispatchThreadId.xy);
	float c = exp(-dot(DeltaPos, DeltaPos) / Radius);
	RWDstTexture[DispatchThreadId.xy + 1] = SrcTexture[DispatchThreadId.xy + 1] + ForceParam.xy * c;
}

float Halfrdx;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void Vorticity(uint3 GroupId : SV_GroupID,
			   uint3 DispatchThreadId : SV_DispatchThreadID,
			   uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 Left, Top, Right, Bottom;
	LoadTextureNeighbors(VelocityField, DispatchThreadId.xy + 1, Left, Top, Right, Bottom);
	RWDstTexture[DispatchThreadId.xy + 1] = Halfrdx * ((Right.y - Left.y) - (Top.x - Bottom.x));
}

Texture2D<float2> VorticityField;
float dxScale;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void VorticityForce(uint3 GroupId : SV_GroupID,
			        uint3 DispatchThreadId : SV_DispatchThreadID,
			        uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 Left, Top, Right, Bottom;
	LoadTextureNeighbors(VorticityField, DispatchThreadId.xy + 1, Left, Top, Right, Bottom);
	float2 VC = VorticityField[DispatchThreadId.xy + 1];
	float2 Force = Halfrdx * float2(abs(Top.x) - abs(Bottom.x), abs(Right.x) - abs(Left.x));
	// we can't use normalize() func directly, it is not safe, so we clamp to a min value 
	static float EPSILON = 2.4414e-4;
	float ForceMagSqr = max(EPSILON, dot(Force, Force));
	Force = Force * rsqrt(ForceMagSqr) * dxScale * VC.x * float2(1.f, -1.f);
	RWDstTexture[DispatchThreadId.xy + 1] = VelocityField[DispatchThreadId.xy + 1] + Force * TimeStep;
}

RWTexture2D<float2> RWDivergence;

// Compute divergence of velocity field
[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void Divergence(uint3 GroupId : SV_GroupID,
				uint3 DispatchThreadId : SV_DispatchThreadID,
				uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 Left, Top, Right, Bottom;
	LoadTextureNeighbors(SrcTexture, DispatchThreadId.xy + 1, Left, Top, Right, Bottom);
	RWDivergence[DispatchThreadId.xy + 1] = Halfrdx * (Right.x - Left.x - Top.y + Bottom.y);
}

Texture2D<float2> PressureField;
RWTexture2D<float2> RWVelocityField;

// Subtract gradient(p) from u, get divergence free velocity field
[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void SubstractGradient(uint3 GroupId : SV_GroupID,
					   uint3 DispatchThreadId : SV_DispatchThreadID,
					   uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 Left, Top, Right, Bottom;
	LoadTextureNeighbors(PressureField, DispatchThreadId.xy + 1, Left, Top, Right, Bottom);
	float2 Gradient = float2(Right.x - Left.x, Bottom.x - Top.x) * Halfrdx;
	RWVelocityField[DispatchThreadId.xy + 1] = VelocityField[DispatchThreadId.xy + 1] - Gradient;
}