#include "/Engine/Public/Platform.ush"

#define PI 3.1415
#define GRAVITY 9.8

#ifndef THREAD_GROUP_SIZE 
#define THREAD_GROUP_SIZE 32
#endif

int WaveSize;
float GridLength;
float WaveAmplitude;
float3 WindSpeed;

Buffer<float2> RandomTable;
//RWTexture2D<float2> RWSpectrum;
//RWTexture2D<float2> RWSpectrumConj;

RWBuffer<float2> RWSpectrum;
RWBuffer<float2> RWSpectrumConj;

float RandFast(uint2 PixelPos, float Magic = 3571.0)
{
	float2 Random2 = (1.0 / 4320.0) * PixelPos + float2(0.25, 0.0);
	float Random = frac(dot(Random2 * Random2, Magic));
	Random = frac(Random * Random * (2 * Magic));
	return Random;
}

float2 GaussianRandomVariable(uint2 RandSeed)
{
	float x1, x2, w;
	do
	{
		x1 = 2.0f * RandFast(RandSeed) - 1.0f;
		x2 = 2.0f * RandFast(RandSeed + uint2(WaveSize + 1, WaveSize + 1)) - 1.0f;
		w = x1 * x1 + x2 * x2;
		RandSeed += uint2(WaveSize + 1, WaveSize + 1);
	} while (w >= 1.0f);
	
	w = sqrt((-2.0f * log(w)) / w);
	return float2(x1 * w, x2 * w);
}

float PhillipsSpectrum(int n, int m)
{
	float2 k = float2(PI * (2 * n - WaveSize) / GridLength, PI * (2 * m - WaveSize) / GridLength);
	float klength = length(k);
	if (klength < 0.000001f)
		return 0.0f;
	float klength2 = klength * klength;
	float klength4 = klength2 * klength2;
	
	k = normalize(k);
	float kdotw = dot(k, normalize(WindSpeed.xy));
	float kdotw2 = kdotw * kdotw;   //we can only compute square of kdotw 
	// Is Magic?
	//float kdotw2 = kdotw * kdotw * kdotw * kdotw * kdotw * kdotw;
	
	float wlength = length(WindSpeed.xy);
	float L = wlength * wlength / GRAVITY;
	float L2 = L * L;

	// Add damping for wave
	float damping = 0.001f;
	float l2 = L2 * damping * damping;
	return WaveAmplitude * exp(-rcp(klength2 * L2)) / klength4 * kdotw2 * exp(-klength2 * l2);  //compute P_h(k)
}

float2 GetSpectrum(int n, int m)
{
	//get a pair of independent random num(Normal distribution
	uint Index = m * (WaveSize + 1) + n;
	//float2 r = GaussianRandomVariable(uint2(n, m));  //compute in gpu
	float2 r = RandomTable[Index]; //use random table that computed by cpu
	return r * sqrt(PhillipsSpectrum(n, m) / 2.f);
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void PhillipsSpectrumCS(
	int3 GroupId : SV_GroupID,
	int3 GroupThreadID : SV_GroupThreadID,
	int3 DispatchThreadID : SV_DispatchThreadID)
{
	int index = DispatchThreadID.y * (WaveSize + 1) + DispatchThreadID.x;
	//RWSpectrum[uint2(index, 0)] = GetSpectrum(DispatchThreadID.x, DispatchThreadID.y);   //compute h_0(k)
	RWSpectrum[index] = GetSpectrum(DispatchThreadID.x, DispatchThreadID.y);   //compute h_0(k)
	float2 Conj = GetSpectrum(-DispatchThreadID.x, -DispatchThreadID.y);
	Conj.y *= -1.0f;  // compute conj of h_0(k)
	RWSpectrumConj[index] = Conj;
}

float  TimeSeconds;
int StartIndex;
Buffer<float> DispersionTable;
//Texture2D<float2> Spectrum;
//Texture2D<float2> SpectrumConj;

Buffer<float2> Spectrum;
Buffer<float2> SpectrumConj;

RWTexture2D<float2> RWHeightBuffer;
RWTexture2D<float4> RWSlopeBuffer;
RWTexture2D<float4> RWDisplacementBuffer;

Texture2D<float2> HeightBuffer;
Texture2D<float4> SlopeBuffer;
Texture2D<float4> DisplacementBuffer;

Buffer<float>  ButterflyLookupTable;

float2 InitSpectrum(float TimeSeconds, int n, int m)
{
	uint Index = m * (WaveSize + 1) + n;
	float Omegat = DispersionTable[Index] * TimeSeconds;

	float Cos = cos(Omegat);
	float Sin = sin(Omegat);

	uint Width1, Width2, Height;
	Spectrum.GetDimensions(Width1);
	SpectrumConj.GetDimensions(Width2);
	if (Width1 > Index && Width2 > Index)
	{
		//Compute the Phullips spectrum h(k,t),because of 'Euler's identity'-> e^(ix)=cosx + i*sinx
		//Make h=(a,i*b), we can get: (a, i*b)*(cosx, i*sinx) = (a*cosx-b*sinx, a*sinx+b*cosx)
		float C0a = Spectrum[Index].x * Cos - Spectrum[Index].y * Sin;
		float C0b = Spectrum[Index].x * Sin + Spectrum[Index].y * Cos;

		float C1a = SpectrumConj[Index].x * Cos - SpectrumConj[Index].y * -Sin;
		float C1b = SpectrumConj[Index].x * -Sin + SpectrumConj[Index].y * Cos;
		//            real part    imaginary part 
		return float2(C0a + C1a,    C0b + C1b);
	}

	return 0.0f;
}

void PrepareForFFT(float TimeSeconds, int n, int m)
{
	float KX, KY, Len, Lambda = -1.f;
	KX = PI * (2.f * n - WaveSize) / GridLength;
	KY = PI * (2.f * m - WaveSize) / GridLength;   // Get it from: 2 * PI * (m - WaveSize / 2) / GridLength
	
	Len = sqrt(KX * KX + KY * KY);
	uint2 Index = uint2(n, m + WaveSize);
	
	float2 C = InitSpectrum(TimeSeconds, n, m);

	// Get the height
	RWHeightBuffer[Index] = C;

	// Compute the slope for normal, i*(KX, KY)*C.  ---------ddx-------      ---------ddy------- 
	//                                               real    imaginary        real    imaginary
	RWSlopeBuffer[Index] =                    float4(-C.y * KX, C.x * KX,   -C.x * KY, C.y * KY);
	
	RWDisplacementBuffer[Index] = Len < 0.000001f ? 0.f : float4(-C.y * -(KX / Len), C.x * -(KX / Len), -C.y * -(KY / Len), C.x * -(KY / Len));
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void PrepareFFTCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	// TODO
	PrepareForFFT(TimeSeconds, DispatchThreadID.x, DispatchThreadID.y);
}

float4 FFT(float2 w,float4 input1,float4 input2)
{
	input1.x += w.x * input2.x - w.y * input2.y;
	input1.y += w.y * input2.x + w.x * input2.y;
	input1.z += w.x * input2.z - w.y * input2.w;
	input1.w += w.y * input2.z + w.x * input2.w;
	
	return input1;
}

float2 FFT(float2 w, float2 input1, float2 input2)
{
	input1.x += w.x * input2.x - w.y * input2.y;
	input1.y += w.y * input2.x + w.x * input2.y;
	
	return input1;
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void PerformFFTCS_Horizontal(
	uint3 GroupId : SV_GroupID, 
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	uint idx = StartIndex % 2;
	uint idx1 = (StartIndex + 1) % 2;
	uint bftIdx = 4 * (DispatchThreadID.x + StartIndex * WaveSize);
	
	uint X = (int) ButterflyLookupTable[bftIdx + 0];
	uint Y = (int) ButterflyLookupTable[bftIdx + 1];
	float2 w = float2(ButterflyLookupTable[bftIdx + 2], ButterflyLookupTable[bftIdx + 3]);
	uint2 BufferIndex = uint2(DispatchThreadID.x, idx * WaveSize + DispatchThreadID.y);
	uint2 XIndex = uint2(X, idx1 * WaveSize + DispatchThreadID.y);
	uint2 YIndex = uint2(Y, idx1 * WaveSize + DispatchThreadID.y);
	RWHeightBuffer[BufferIndex] = FFT(w, RWHeightBuffer[XIndex], RWHeightBuffer[YIndex]);
	RWSlopeBuffer[BufferIndex] = FFT(w, RWSlopeBuffer[XIndex], RWSlopeBuffer[YIndex]);
	RWDisplacementBuffer[BufferIndex] = FFT(w, RWDisplacementBuffer[XIndex], RWDisplacementBuffer[YIndex]);
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void PerformFFTCS_Vertical(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	uint passes = round(log2(WaveSize)); // equal to log(WaveSize)/log(2)
	uint idx = (StartIndex + passes) % 2;
	uint idx1 = (StartIndex + passes + 1) % 2;
	uint bftIdx = 4 * (DispatchThreadID.y + StartIndex * WaveSize);
	
	uint X = (uint) ButterflyLookupTable[bftIdx + 0];
	uint Y = (uint) ButterflyLookupTable[bftIdx + 1];
	float2 w = float2(ButterflyLookupTable[bftIdx + 2], ButterflyLookupTable[bftIdx + 3]);
	uint2 BufferIndex = uint2(DispatchThreadID.x, idx * WaveSize + DispatchThreadID.y);
	uint2 XIndex = uint2(DispatchThreadID.x, idx1 * WaveSize + X);
	uint2 YIndex = uint2(DispatchThreadID.x, idx1 * WaveSize + Y);
	RWHeightBuffer[BufferIndex] = FFT(w, RWHeightBuffer[XIndex], RWHeightBuffer[YIndex]);
	RWSlopeBuffer[BufferIndex] = FFT(w, RWSlopeBuffer[XIndex], RWSlopeBuffer[YIndex]);
	RWDisplacementBuffer[BufferIndex] = FFT(w, RWDisplacementBuffer[XIndex], RWDisplacementBuffer[YIndex]);
}

SamplerState TextureSampler;

void ComputePosAndNormalVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 UV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	OutPosition = InPosition;
	OutUV = UV;
}

static float Signs[2] = { 1.f, -1.f };

void GetPosOffsetAndNormal(uint2 Coord, uint Size, out float3 PosOffset, out float3 Normal)
{
    Coord.x -= (Coord.x / Size) * Coord.x; 
    Coord.y -= (Coord.y / Size) * Coord.y; 
	uint2 Index = uint2(Coord.y, Size + Coord.x);
	int Sign = Signs[(Coord.x + Coord.y) & 1];
    float Lambda = -1.f;
	
	PosOffset = float3(DisplacementBuffer[Index].z * Lambda * Sign, DisplacementBuffer[Index].x * Lambda * Sign, HeightBuffer[Index].x * Lambda * Sign);
	Normal = float3(-SlopeBuffer[Index].zx * Sign, 1);
	Normal /= length(Normal);
	//Normal = normalize(float3(0.f, 0.f, 1.f));
}

float3 GaurodInterpolate(float2 FirstUV, float2 SecondUV, float2 ThirdUV, float3 FirstVal, float3 SecondVal, float3 ThirdVal, float2 TargetUV)
{
	float TriangleArea = 0.5f;
	float2 V0 = ThirdUV - FirstUV;
	float2 V1 = SecondUV - FirstUV;
	float2 VT = TargetUV - FirstUV;

	float SecondW = abs(VT.x * V0.y - VT.y * V0.x) / (2 * TriangleArea);
	float ThirdW = abs(VT.x * V1.y - VT.y * V1.x) / (2 * TriangleArea);
	float FirstW = 1 - SecondW - ThirdW;
	return FirstW * FirstVal + SecondW * SecondVal + ThirdW * ThirdVal;
}

void ComputePosAndNormalPS(
	in float2 UV : TEXCOORD0,
	out float4 OutPosOffset : SV_Target0,
	out float4 OutNormal : SV_Target1
)
{
	int Sign;
	uint Width, Height;
	HeightBuffer.GetDimensions(Width, Height);
	uint Size = Width;
	float CoordX = Size * UV.x;
	uint PointX = floor(CoordX);
	float LerpAlphaX = frac(CoordX);
	FLATTEN
	if (PointX == Size)
	{
		PointX -= 1;
		LerpAlphaX = 1.f;
	}
	float CoordY = Size * UV.y;
	uint PointY = floor(CoordY);
	float LerpAlphaY = frac(CoordY);
	FLATTEN
	if (PointY == Size)
	{
		PointY -= 1;
		LerpAlphaY = 1.f;
	}
	
	uint RightPoint = PointX + sign(LerpAlphaX);
	uint DownPoint = PointY + sign(LerpAlphaY);
	bool bInBorderRight = (RightPoint == Size);
	bool bInBorderDown = (DownPoint == Size);
	float3 TopLeftPos, TopRightPos, DownLeftPos, DownRightPos;
	float3 TopLeftNormal, TopRightNormal, DownLeftNormal, DownRightNormal;
	GetPosOffsetAndNormal(uint2(PointX, PointY), Size, TopLeftPos, TopLeftNormal);
	GetPosOffsetAndNormal(uint2(RightPoint, PointY), Size, TopRightPos, TopRightNormal);
	GetPosOffsetAndNormal(uint2(PointX, DownPoint), Size, DownLeftPos, DownLeftNormal);
	GetPosOffsetAndNormal(uint2(RightPoint, DownPoint), Size, DownRightPos, DownRightNormal);
	//Bilinear lerp
	OutPosOffset = float4(lerp(lerp(TopLeftPos, TopRightPos, LerpAlphaX), lerp(DownLeftPos, DownRightPos, LerpAlphaX), LerpAlphaY), 1.f);
	OutNormal = float4(lerp(lerp(TopLeftNormal, TopRightNormal, LerpAlphaX), lerp(DownLeftNormal, DownRightNormal, LerpAlphaX), LerpAlphaY), 1.f);
	return;

	////Triangle lerp(Gaurod)
	//if(LerpAlphaY >= LerpAlphaX)
	//{
	//	OutPosOffset = float4(GaurodInterpolate(float2(0.f, 0.f), float2(1.f, 1.f), float2(0.f, 1.f), TopLeftPos, DownRightPos, DownLeftPos, float2(LerpAlphaX, LerpAlphaY)), 1.f);
	//	//OutNormal = float4(GaurodInterpolate(float2(0.f, 0.f), float2(1.f, 1.f), float2(0.f, 1.f), TopLeftNormal, DownRightNormal, DownLeftNormal, float2(LerpAlphaX, LerpAlphaY)), 1.f);
	//}
	//else
	//{
	//	OutPosOffset = float4(GaurodInterpolate(float2(0.f, 0.f), float2(1.f, 0.f), float2(1.f, 1.f), TopLeftPos, TopRightPos, DownRightPos, float2(LerpAlphaX, LerpAlphaY)), 1.f);
	//	//OutNormal = float4(GaurodInterpolate(float2(0.f, 0.f), float2(1.f, 0.f), float2(1.f, 1.f), TopLeftNormal, TopRightNormal, DownRightNormal, float2(LerpAlphaX, LerpAlphaY)), 1.f);
	//}
}