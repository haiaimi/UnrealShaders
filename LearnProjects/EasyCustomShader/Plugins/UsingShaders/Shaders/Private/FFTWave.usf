#include "/Engine/Public/Platform.ush"

#define PI 3.1415
#define GRAVITY 9.8
int WaveSize;
static float GridLength = 100.f;
float WaveAmplitude;
float3 WindSpeed;

RWTexture2D<float2> Spectrum;
RWTexture2D<float2> SpectrumConj;

float RandFast(uint2 PixelPos, float Magic = 3571.0)
{
	float2 Random2 = (1.0 / 4320.0) * PixelPos + float2(0.25, 0.0);
	float Random = frac(dot(Random2 * Random2, Magic));
	Random = frac(Random * Random * (2 * Magic));
	return Random;
}

float2 GaussianRandomVariable(uint2 RandSeed)
{
	float x1, x2, w;
	do
	{
		x1 = 2.0f * RandFast(RandSeed) - 1.0f;
		x2 = 2.0f * RandFast(RandSeed + uint2(WaveSize, WaveSize)) - 1.0f;
		w = x1 * x1 + x2 * x2;
	} while (w >= 1.0f);
	
	w = sqrt((-2.0f * log(w)) / w);
	return float2(x1 * w, x2 * w);
}

float PhillipsSpectrum(int n, int m)
{
	float2 k = float2(PI * (2 * n - WaveSize) / GridLength, PI * (2 * m - WaveSize) / GridLength);
	float klength = length(k);
	if (klength < 0.000001f)
		return 0.0f;
	float klength2 = klength * klength;
	float klength4 = klength2 * klength2;
	k = normalize(k);
	
	float kdotw = dot(k, WindSpeed.xy);
	float kdotw2 = kdotw * kdotw * kdotw * kdotw * kdotw * kdotw;
	
	float wlength = length(WindSpeed);
	float L = wlength * wlength / GRAVITY;
	float L2 = L * L;

	float damping = 0.001f;
	float l2 = L2 * damping * damping;
	return WaveAmplitude * exp(-1.0f / (klength2 * L2)) / klength4 * kdotw2 * exp(-klength2 * l2);
}

float2 GetSpectrum(int n, int m)
{
	float2 r = GaussianRandomVariable(uint2(n, m));
	return r * sqrt(PhillipsSpectrum(n, m) / 2.f);
}

[numthreads(4, 4, 4)]
void PhillipsSpectrumCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	int index = DispatchThreadID.x * (WaveSize + 1) + DispatchThreadID.y;
	Spectrum[uint2(0, index)] = GetSpectrum(-(int)DispatchThreadID.y, -(int)DispatchThreadID.x);
	SpectrumConj[uint2(0, index)] = float2(GetSpectrum(-(int)DispatchThreadID.y, -(int)DispatchThreadID.x).x, -SpectrumConj[uint2(0, index)].y);
}

float  TimeSeconds;
int StartIndex;
RWTexture2D<float2> HeightBuffer;
RWTexture2D<float4> SlopeBuffer;
RWTexture2D<float4> DisplacementBuffer;
Buffer<float>  ButterflyLookupTable;

float4 FFT(float2 w,float4 input1,float4 input2)
{
	input1.x += w.x * input2.x - w.y * input2.y;
	input1.y += w.y * input2.x + w.x * input2.y;
	input1.z += w.x * input2.z - w.y * input2.w;
	input1.w += w.y * input2.z + w.x * input2.w;
	
	return input1;
}

float2 FFT(float2 w, float2 input1, float2 input2)
{
	input1.x += w.x * input2.x - w.y * input2.y;
	input1.y += w.y * input2.x + w.x * input2.y;
	
	return input1;
}

[numthreads(4, 4, 4)]
void PerformFFTCS1(
	uint3 GroupId : SV_GroupID, 
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	int idx = DispatchThreadID.z % 2;
	int idx1 = (DispatchThreadID.z + 1) % 2;
	int bftIdx = 4 * (DispatchThreadID.x + DispatchThreadID.z * WaveSize);
	
	int X = (int) ButterflyLookupTable[bftIdx + 0];
	int Y = (int) ButterflyLookupTable[bftIdx + 1];
	float2 w = { ButterflyLookupTable[bftIdx + 2], ButterflyLookupTable[bftIdx + 3] };
	HeightBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, HeightBuffer[uint2(idx1, X + DispatchThreadID.y * WaveSize)], HeightBuffer[uint2(idx1, Y + DispatchThreadID.y * WaveSize)]);
	SlopeBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, SlopeBuffer[uint2(idx1, X + DispatchThreadID.y * WaveSize)], SlopeBuffer[uint2(idx1, Y + DispatchThreadID.y * WaveSize)]);
	DisplacementBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, DisplacementBuffer[uint2(idx1, X + DispatchThreadID.y * WaveSize)], DisplacementBuffer[uint2(idx1, Y + DispatchThreadID.y * WaveSize)]);
}

[numthreads(4, 4, 4)]
void PerformFFTCS2(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadID : SV_GroupThreadID,
	uint3 DispatchThreadID : SV_DispatchThreadID)
{
	int passes = round(log2(WaveSize)); // equal to log(WaveSize)/log(2)
	int idx = (DispatchThreadID.z + passes) % 2;
	int idx1 = (DispatchThreadID.z + passes + 1) % 2;
	int bftIdx = 4 * (DispatchThreadID.y + DispatchThreadID.z * WaveSize);
	
	int X = (int) ButterflyLookupTable[bftIdx + 0];
	int Y = (int) ButterflyLookupTable[bftIdx + 1];
	float2 w = { ButterflyLookupTable[bftIdx + 2], ButterflyLookupTable[bftIdx + 3] };
	HeightBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, HeightBuffer[uint2(idx1, DispatchThreadID.x + X * WaveSize)], HeightBuffer[uint2(idx1, DispatchThreadID.x + Y * WaveSize)]);
	SlopeBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, SlopeBuffer[uint2(idx1, DispatchThreadID.x + X * WaveSize)], SlopeBuffer[uint2(idx1, DispatchThreadID.x + Y * WaveSize)]);
	DisplacementBuffer[uint2(idx, DispatchThreadID.x + DispatchThreadID.y * WaveSize)] = FFT(w, DisplacementBuffer[uint2(idx1, DispatchThreadID.x + X * WaveSize)], DisplacementBuffer[uint2(idx1, DispatchThreadID.x + Y * WaveSize)]);
}