#include "/Engine/Private/Common.ush"

/*
 * "Seascape" by Alexander Alekseev aka TDM - 2014
 * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
 * Contact: tdmaav@gmail.com
 */

//此Shader使用Ray Marching思想实现水体模拟，不需要纹理贴图
//webgl改成UE4内适用的HLSL
//Quoted from https://www.shadertoy.com/view/Ms2SD1

#define NUM_STEPS  8
#define EPSILON  1e-3
#define EPSILON_NRM (0.1 / 1000)
#define PI 3.14

// sea
#define ITER_GEOMETRY  3
#define ITER_FRAGMENT  5
#define SEA_HEIGHT  0.6
#define SEA_CHOPPY  4.0
#define SEA_SPEED  0.8;
#define SEA_FREQ  0.16;
#define SEA_BASE  float3(0.1, 0.19, 0.22)
#define SEA_WATER_COLOR  float3(0.8, 0.9, 0.6)
#define SEA_TIME 1.0
#define octave_m  float2x2(1.6, 1.2, -1.2, 1.6)

float getSeaTime()
{
    return 1.0 + FRayMarchingData.TimeSeconds * SEA_SPEED;
}

// math  convert euler to rotation matrix
//欧拉角转换到矩阵，用于视角旋转
float3x3 fromEuler(float3 ang)
{
    float2 a1 = float2(sin(ang.x), cos(ang.x));
    float2 a2 = float2(sin(ang.y), cos(ang.y));
    float2 a3 = float2(sin(ang.z), cos(ang.z));
    float3x3 m;
    m[0] = float3(a1.y * a3.y + a1.x * a2.x * a3.x, a1.y * a2.x * a3.x + a3.y * a1.x, -a2.y * a3.x);
    m[1] = float3(-a2.y * a1.x, a1.y * a2.y, a2.x);
    m[2] = float3(a3.y * a1.x * a2.x + a1.y * a3.x, a1.x * a3.x - a1.y * a3.y * a2.x, a2.y * a3.y);
    return m;
}

float hash(float2 p)
{
    float h = dot(p, float2(127.1, 311.7));
    return frac(sin(h) * 43758.5453123);
}

//噪声算法
float noise(in float2 p)
{
    float2 i = floor(p);
    float2 f = frac(p);
    float2 u = f * f * (3.0 - 2.0 * f);
    return -1.0 + 2.0 * lerp(lerp(hash(i + float2(0.0, 0.0)), hash(i + float2(1.0, 0.0)), u.x),
							 lerp(hash(i + float2(0.0, 1.0)), hash(i + float2(1.0, 1.0)), u.x),
							 u.y);
}

// lighting
//漫反射
float diffuse(float3 n, float3 l, float p)
{
    return pow(dot(n, l) * 0.4 + 0.6, p);
}

//镜面光
float specular(float3 n, float3 l, float3 e, float s)
{
    float nrm = (s + 8.0) / (PI * 8.0);
    return pow(max(dot(reflect(e, n), l), 0.0), s) * nrm;
}

// sky
float3 getSkyColor(float3 e)
{
    e.y = max(e.y, 0.0);
    return float3(pow(1.0 - e.y, 2.0), 1.0 - e.y, 0.6 + (1.0 - e.y) * 0.4);
}

// sea
//通过正余弦波获取水体的高度
float sea_octave(float2 uv, float choppy)
{
    uv += noise(uv);  //取uv的噪声值
    float2 wv = 1.0 - abs(sin(uv));
    float2 swv = abs(cos(uv));
    wv = lerp(wv, swv, wv);
    return pow(1.0 - pow(wv.x * wv.y, 0.65), choppy);
}

//Ray Marching中步进结果与目标位置的比对
float map(float3 p)
{
    float freq = SEA_FREQ;    //波浪频率
    float amp = SEA_HEIGHT;   //
    float choppy = SEA_CHOPPY;
    float2 uv = p.xz;
    uv.x *= 0.75;
    
    float d, h = 0.0;
	//下面是多次循环来获取水面高度
    UNROLL
    for (int i = 0; i < ITER_GEOMETRY; i++)
    {                  
        d = sea_octave((uv + getSeaTime()) * freq, choppy);
        d += sea_octave((uv - getSeaTime()) * freq, choppy);
        h += d * amp;
        uv = mul(uv, octave_m);  //变换UV，获取不同的位置
        freq *= 1.9;
        amp *= 0.22;
        choppy = lerp(choppy, 1.0, 0.2);
    }
    return p.y - h;  //当前高度与目标高度对比
}

float map_detailed(float3 p)
{
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    float2 uv = p.xz;
    uv.x *= 0.75;
    
    float d, h = 0.0;
	UNROLL
    for (int i = 0; i < ITER_FRAGMENT; i++)
    {
        d = sea_octave((uv + getSeaTime()) * freq, choppy);
        d += sea_octave((uv - getSeaTime()) * freq, choppy);
        h += d * amp;
        uv = mul(uv, octave_m);
        freq *= 1.9;
        amp *= 0.22;
        choppy = lerp(choppy, 1.0, 0.2);
    }
    return p.y - h;
}

float3 getSeaColor(float3 p, float3 n, float3 l, float3 eye, float3 dist)
{
    float fresnel = clamp(1.0 - dot(n, -eye), 0.0, 1.0);
    fresnel = pow(fresnel, 3.0) * 0.65;
        
    float3 reflected = getSkyColor(reflect(eye, n));
    float3 refracted = SEA_BASE + diffuse(n, l, 80.0) * SEA_WATER_COLOR * 0.12;
    
    float3 color = lerp(refracted, reflected, fresnel);
    
    float atten = max(1.0 - dot(dist, dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;
    
    color += float3(1, 1, 1) * specular(n, l, eye, 60.0);
    
    return color;
}

// Tracing Marching      Get the normal of specified point
// 计算法线
float3 getNormal(float3 p, float eps)
{
    float3 n;
    n.y = map_detailed(p);
    n.x = map_detailed(float3(p.x + eps, p.y, p.z)) - n.y;
    n.z = map_detailed(float3(p.x, p.y, p.z + eps)) - n.y;
    n.y = eps;
    return normalize(n);
}
//通过Ray Marching获取高度
float heightMapTracing(float3 ori, float3 dir, out float3 p)
{
    float tm = 0.0;
    float tx = 1000.0;
    float hx = map(ori + dir * tx);
    if (hx > 0.0)
        return tx;
    float hm = map(ori + dir * tm);
    float tmid = 0.0;
	//通过SDF(Signed Distance Function)方法获取位置
    UNROLL
    for (int i = 0; i < NUM_STEPS; i++)
    {
        tmid = lerp(tm, tx, hm / (hm - hx));   //每次改变步长
        p = ori + dir * tmid;
        float hmid = map(p);    //比较结果
        if (hmid < 0.0)   //小于0，步进超过目标位置，还有步数就反向步进
        {
            tx = tmid;
            hx = hmid;
        }
        else     //大于0，还为到达目标，加大步长
        {
            tm = tmid;
            hm = hmid;
        }
    }
    return tmid;
}

//Main Vertex Shader
void MainVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 UV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
)
{
    OutPosition = InPosition;
    OutUV = UV;
}

//Main Pixel Shader
void MainPS(
	in float2 fragCoord : TEXCOORD0,
    out float4 fragColor : SV_Target0
)
{
    float2 SimResolution = FRayMarchingData.ViewResolution;
    float2 uv = fragCoord.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= SimResolution.x / SimResolution.y;
    float time = getSeaTime() * 0.3 + FRayMarchingData.MousePos.x * 0.01;
        
    // ray
    float3 ang = float3(sin(time * 3.0) * 0.1, sin(time) * 0.2 + 0.3, time);
    float3 ori = float3(0.0, 3.5, time * 5.0);    //摄像机位置，随着时间变换位置
    float3 dir = normalize(float3(uv.xy, -2.0));  //视线方向
    dir.z += length(uv) * 0.15;
    //dir = mul(normalize(dir), fromEuler(ang));
    
    // tracing
    float3 p;
    heightMapTracing(ori, dir, p);
    float3 dist = p - ori;
    float3 n = getNormal(p, dot(dist, dist) * (0.1 / SimResolution.x));
    float3 light = normalize(float3(0.0, 1.0, 0.8));
             
    // color
    float3 color = lerp(
        getSkyColor(dir),
        getSeaColor(p, n, light, dir, dist),
    	pow(smoothstep(0.0, -0.05, dir.y), 0.3));
        
    // post
    fragColor = float4(pow(color, float3(0.75, 0.75, 0.75)), 1.0);
}