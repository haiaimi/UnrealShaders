#include "/Engine/Private/Common.ush"

float4x4 ViewProjMatrix;
float TextureSize1;

struct FVertexInput
{
	float3 VertexPosition : ATTRIBUTE0;
	
	// #TODO following is world matrix
	float4 WorldMatrixRow_0 : ATTRIBUTE1;
	float4 WorldMatrixRow_1 : ATTRIBUTE2;
	float4 WorldMatrixRow_2 : ATTRIBUTE3;
	float4 WorldMatrixRow_3 : ATTRIBUTE4;
	//float4x4 WorldMatrix : ATTRIBUTE1;
	uint InstanceID : SV_InstanceID;
};

void GenerateMeshMaskShaderVS(
	in FVertexInput Input,
	out float4 OutPosition : SV_Position,
	out uint InstanceIndex : SV_InstanceID
)
{
	float4x4 WorldViewProjMarix = mul(float4x4(Input.WorldMatrixRow_0, Input.WorldMatrixRow_1, Input.WorldMatrixRow_2, Input.WorldMatrixRow_3), ViewProjMatrix);
	OutPosition = mul(float4(Input.VertexPosition, 1.f), WorldViewProjMarix);
	OutPosition /= OutPosition.w;
	InstanceIndex = Input.InstanceID;
}

void GenerateMeshMaskShaderPS(
	in float4 PixelCoord : SV_Position,
	in uint InstanceIndex : SV_InstanceID,
	out float4 OutColor0 : SV_Target0,
	out float4 OutColor1 : SV_Target1
)
{
	float2 PixelUV = (PixelCoord.xy - 0.5f) / TextureSize1; // 0.5 is the offset in ps
	float4 GroupRegion[2] = { float4(1.f, 1.f, 0.f, 0.f), float4(0.f, 0.f, 1.f, 1.f) };
	uint Group = InstanceIndex / 2;
	uint IDInGroup = InstanceIndex % 2;
	OutColor0 = (1 - Group) * GroupRegion[IDInGroup] * float4(PixelUV, PixelUV);
	OutColor1 = Group * GroupRegion[IDInGroup] * float4(PixelUV, PixelUV);
}

void GeneralShaderVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 UV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_Position
)
{
	OutPosition = InPosition;
	OutUV = UV;
}

uint CurLevel;
float2 DistanceFieldDimension;
Texture2D<float4> MaskTexture0;
Texture2D<float4> MaskTexture1;
SamplerState TextureSampler;

float GetBestCoordUV(float ComparedDist, float2 CurUV, float2 SampledUV, float2 UV, out float2 OutUV)
{
	float Distance = length(SampledUV - CurUV);
	BRANCH
	if ((Distance < ComparedDist) && (SampledUV.x != 0.f || SampledUV.y != 0.f))
	{
		OutUV = SampledUV;
		return Distance;
	}
	OutUV = UV;
	return ComparedDist;
}


// We use jump flood generate distancefield
void FastStepJF(float2 UV, float Level, out float4 Target0, out float4 Target1)
{
	uint2 TextureSize2D;
	MaskTexture0.GetDimensions(TextureSize2D.x, TextureSize2D.y);
	float TextureSize = max(TextureSize2D.x, TextureSize2D.y);;
	float MaxLevel = floor(log2(TextureSize) + 0.5f);
	
	Level = clamp(Level - 1, 0, MaxLevel);
	float StepWidth = floor(exp2(MaxLevel - Level) + 0.5f);
	
	float4 BestDistance = 1.f;
	
	float2 BestCoord0 = 0.f;
	float2 BestCoord1 = 0.f;
	float2 BestCoord2 = 0.f;
	float2 BestCoord3 = 0.f;
	
	UNROLL
	for (int y = -1; y <= 1; ++y)
	{
		UNROLL
		for (int x = -1; x <= 1; ++x)
		{
			float2 SampleCoord = UV + float2(x, y) * (StepWidth / TextureSize);
			float4 Data0 = MaskTexture0.Sample(TextureSampler, SampleCoord);
			float4 Data1 = MaskTexture1.Sample(TextureSampler, SampleCoord);
			float2 Channel0 = Data0.xy;
			float2 Channel1 = Data0.zw;
			float2 Channel2 = Data1.xy;
			float2 Channel3 = Data1.zw;
			
			BestDistance.x = GetBestCoordUV(BestDistance.x, UV, Channel0, BestCoord0, BestCoord0);
			BestDistance.y = GetBestCoordUV(BestDistance.y, UV, Channel1, BestCoord1, BestCoord1);
			BestDistance.z = GetBestCoordUV(BestDistance.z, UV, Channel2, BestCoord2, BestCoord2);
			BestDistance.w = GetBestCoordUV(BestDistance.w, UV, Channel3, BestCoord3, BestCoord3);
		}
	}
	Target0 = float4(BestCoord0, BestCoord1);
	Target1 = float4(BestCoord2, BestCoord3);
}

void GenerateDistanceFieldShaderPS(
	in float2 InUV : TEXCOORD0,
	out float4 OutColor0 : SV_Target0,
	out float4 OutColor1 : SV_Target1
)
{
	FastStepJF(InUV, CurLevel, OutColor0, OutColor1);

}

