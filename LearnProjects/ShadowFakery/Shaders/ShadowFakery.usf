
float4x4 ViewProjMatrix;

struct FVertexInput
{
	float3 VertexPosition : ATTRIBUTE0;
	
	// #TODO following is world matrix
	float4 WorldMatrixRow_0 : ATTRIBUTE1;
	float4 WorldMatrixRow_1 : ATTRIBUTE2;
	float4 WorldMatrixRow_2 : ATTRIBUTE3;
	float4 WorldMatrixRow_3 : ATTRIBUTE4;
	//float4x4 WorldMatrix : ATTRIBUTE1;
	
	float4 InstanceColor : ATTRIBUTE5;
};

void GenerateMeshMaskShaderVS(
	in FVertexInput Input,
	out sample float4 OutColor : COLOR0,
	out sample float4 OutPosition : SV_Position
)
{
	float4x4 WorldViewProjMarix = mul(float4x4(Input.WorldMatrixRow_0, Input.WorldMatrixRow_1, Input.WorldMatrixRow_2, Input.WorldMatrixRow_3), ViewProjMatrix);
	OutPosition = mul(float4(Input.VertexPosition, 1.f), WorldViewProjMarix);
	OutPosition /= OutPosition.w;
	OutColor = Input.InstanceColor;
}

void GenerateMeshMaskShaderPS(
	in sample float4 InColor : COLOR0,
	out sample float4 OutColor : SV_Target
)
{
	OutColor = InColor;
}

void GenerateDistanceFieldShaderVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 UV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_Position
)
{
	OutPosition = InPosition;
	OutUV = UV;
}

Texture2D<float4> MaskTexture;
SamplerState TextureSampler;

void GenerateDistanceFieldShaderPS(
	in float2 OutUV : TEXCOORD0,
	out float4 OutColor : SV_Target
)
{
	
}