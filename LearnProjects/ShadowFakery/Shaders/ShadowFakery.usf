#include "/Engine/Private/Common.ush"

float4x4 ViewProjMatrix;

struct FVertexInput
{
	float3 VertexPosition : ATTRIBUTE0;
	
	// #TODO following is world matrix
	float4 WorldMatrixRow_0 : ATTRIBUTE1;
	float4 WorldMatrixRow_1 : ATTRIBUTE2;
	float4 WorldMatrixRow_2 : ATTRIBUTE3;
	float4 WorldMatrixRow_3 : ATTRIBUTE4;
	//float4x4 WorldMatrix : ATTRIBUTE1;
	
	float4 InstanceColor : ATTRIBUTE5;
};

void GenerateMeshMaskShaderVS(
	in FVertexInput Input,
	out sample float4 OutColor : COLOR0,
	out sample float4 OutPosition : SV_Position
)
{
	float4x4 WorldViewProjMarix = mul(float4x4(Input.WorldMatrixRow_0, Input.WorldMatrixRow_1, Input.WorldMatrixRow_2, Input.WorldMatrixRow_3), ViewProjMatrix);
	OutPosition = mul(float4(Input.VertexPosition, 1.f), WorldViewProjMarix);
	OutPosition /= OutPosition.w;
	OutColor = Input.InstanceColor;
}

void GenerateMeshMaskShaderPS(
	in sample float4 InColor : COLOR0,
	out sample float4 OutColor : SV_Target
)
{
	OutColor = InColor;
}

void GenerateDistanceFieldShaderVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 UV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_Position
)
{
	OutPosition = InPosition;
	OutUV = UV;
}

uint CurLevel;
float2 DistanceFieldDimension;
Texture2D<float4> MaskTexture;
SamplerState TextureSampler;

float GetMinDistance(float ComparedDist, float CurDist, float PixelData)
{
	if (PixelData >= 1.f)
		
	return (PixelData != 0.f && CurDist < ComparedDist) ? CurDist : ComparedDist;
}

// We use jump floating generate distancefield
float4 FastStepJF(float2 UV, float Level)
{
	uint2 TextureSize2D;
	MaskTexture.GetDimensions(TextureSize2D.x, TextureSize2D.y);
	float TextureSize = max(TextureSize2D.x, TextureSize2D.y);
	float MaxLevel = round(log2(TextureSize)); 
	
	Level = clamp(Level - 1, 0, MaxLevel);
	float StepWidth = floor(exp2(MaxLevel - Level));
	float4 BestDistance = 1.f;
	
	UNROLL
	for (int y = -1; y <= 1; ++y)
	{
		UNROLL
		for (int x = -1; x <= 1; ++x)
		{
			float2 SampleCoord = clamp(UV + float2(x, y) * StepWidth / TextureSize, float2(0.f, 0.f), float2(1.f, 1.f));
			float4 SampleData = MaskTexture.SampleLevel(TextureSampler, SampleCoord, 0);
			float Distance = length(SampleCoord - UV);
			BestDistance.x = GetMinDistance(BestDistance.x, Distance, SampleData.x);
			BestDistance.y = GetMinDistance(BestDistance.y, Distance, SampleData.y);
			BestDistance.z = GetMinDistance(BestDistance.z, Distance, SampleData.z);
			BestDistance.w = GetMinDistance(BestDistance.w, Distance, SampleData.w);
		}
	}
	if (BestDistance == 1.f)
		return -1.f;
	if(BestDistance == 0.f)
		return 1.f;
	return  BestDistance / 0.1f;
}

void GenerateDistanceFieldShaderPS(
	in float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target
)
{
	OutColor = FastStepJF(InUV, CurLevel);
}